def solve_without_backtracking(board):
    while True:
        changed = False
        for row in range(9):
            for col in range(9):
                if board[row][col] == 0:
                    possible = possible_values(board, row, col)
                    if len(possible) == 1:
                        board[row][col] = possible.pop()
                        changed = True

        if not changed:
            break

    return is_solved(board)


def possible_values(board, row, col):
    values = set(range(1, 10))
    
    values -= set(board[row])
    
    values -= {board[i][col] for i in range(9)}
    
    box_row = row // 3
    box_col = col // 3

    # 2. 3x3 kutudaki değerleri toplamak için bir set oluşturulur
    box_values = set()
    for i in range(box_row * 3, box_row * 3 + 3):  # 3x3 kutunun satırlarını dolaş
        for j in range(box_col * 3, box_col * 3 + 3):  # 3x3 kutunun sütunlarını dolaş
            box_values.add(board[i][j])  # Hücre değerini kutu kümesine ekle
    # 6. Kutudaki değerler de `values` kümesinden çıkarılır
    values -= box_values

    # 7. Geriye kalan mümkün değerler döndürülür
    return values
# 3. Kutudaki değerler `values` kümesinden çıkarılır


def is_solved(board):
    for row in board:
        for cell in row: # Check if there is empty box
            if cell == 0:
                return False
    return True


def print_board(board):
    for i in range(len(board)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - - -")
        for j in range(len(board[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")
            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")


# Sudoku tahtası (örnek)
board = [
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 0],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
]

print("Original Board:")
print_board(board)

if solve_without_backtracking(board):
    print("\nSolved Board:")
    print_board(board)
else:
    print("\nThe Sudoku cannot be solved without backtracking.")

class Book:
    def __init__(self, title, author, publish_date, isbn, is_borrow=False, borrower=None):
        self.title = title
        self.author = author
        self.publish_date = publish_date
        self.isbn = isbn
        self.is_borrowed = is_borrow
        self.borrower = borrower


class User:
    def __init__(self, first_name, last_name, student_id):
        self.first_name = first_name
        self.last_name = last_name
        self.student_id = student_id


class Library:
    def __init__(self):
        self.books = []
        self.users = []
        self.data_file = "library_data.json"
        self._load_data()

    def _save_data(self):
        books_data = []
        for book in self.books:
            book_data = {
                'title': book.title,
                'author': book.author,
                'publish_date': book.publish_date,
                'isbn': book.isbn,
                'is_borrowed': book.is_borrowed,
                'borrower': book.borrower,
            }
            books_data.append(book_data)

        users_data = []
        for user in self.users:
            user_data = {
                'first_name': user.first_name,
                'last_name': user.last_name,
                'student_id': user.student_id
            }
            users_data.append(user_data)

        with open(self.data_file, 'w', encoding="utf-8") as file:
            json.dump({
                'books': books_data,
                'users': users_data,
            }, file, indent=2, ensure_ascii=False)

    def _load_data(self):
        try:
            with open(self.data_file, 'r') as file:
                data = json.load(file)
                for book_data in data.get('books', []):
                    title = book_data['title']
                    author = book_data['author']
                    publish_date = book_data['publish_date']
                    isbn = book_data['isbn']
                    is_borrowed = book_data.get('is_borrowed', False)
                    borrower = book_data.get('borrower', None)

                    book_obj = Book(title, author, publish_date, isbn, is_borrowed, borrower)
                    self.books.append(book_obj)

                for user_data in data.get('users', []):
                    first_name = user_data['first_name']
                    last_name = user_data['last_name']
                    student_id = user_data['student_id']
                    user_obj = User(first_name, last_name, student_id)
                    self.users.append(user_obj)

        except FileNotFoundError:
            self._save_data()

    def add_book(self, title, author, publish_date, isbn):
        for book in self.books:
            if book.title == title and book.author == author and book.publish_date == publish_date and book.isbn == isbn:
                return False

        # We do not use the else statement because we want to check all books
        new_book = Book(title, author, publish_date, isbn)
        self.books.append(new_book)
        self._save_data()
        return new_book.title

    def add_user(self, first_name, last_name, student_id):
        for user in self.users:
            if user.student_id == student_id:
                return False
        new_user = User(first_name, last_name, student_id)
        self.users.append(new_user)
        self._save_data()
        return new_user.student_id

    def check_book_by_isbn(self, isbn):
        for book in self.books:
            if book.isbn == isbn:
                return True

        return False

    def remove_book(self, isbn):
        for book in self.books:
            if book.isbn == isbn:
                self.books.remove(book)
                self._save_data()
                return book.title
        return False

    def delete_user(self, student_id):
        for user in self.users:
            if user.student_id == student_id:
                # Check if the user has borrowed any books
                for book in self.books:
                    if book.borrower == student_id:
                        # User has borrowed books, can not delete
                        return False

                self.users.remove(user)
                self._save_data()
                return user.student_id

        return False

    def list_books(self):
        if not self.books:
            print([])
        return [book.isbn for book in self.books]

    def borrow_book(self, isbn, student_id):
        # we need to change user parameter to the student_id

        try:
            int(isbn)
            int(student_id)
        except:
            return False

        for user in self.users:
            if user.student_id == student_id:
                for book in self.books:
                    if book.isbn == isbn:
                        if book.is_borrowed == False:
                            book.is_borrowed = True
                            book.borrower = student_id
                            self._save_data()
                            return True
                        else:
                            return False
                return False
        return False

    def return_book(self, isbn):
        book = next((book for book in self.books if book.isbn == isbn), None)
        if book and book.is_borrowed:
            book.is_borrowed = False
            book.borrower = None
            self._save_data()
            return True
        return False

library = Library()

result = library.add_book("Animal Farm", "George Orwell", "2003", 9780452284241)
print(library.add_book("Chess","Stefan Zweig","1943",78123612012))
user1= library.add_user("Selim","Altay",15040203)
print(result)
print(user1)
user2 = library.add_user("Aylin","Kaya",17140103)
print(user2)
print(library.add_user("Kerem","CANAN",221401223))
library.add_book("1984","George Orwell","1949",2123012312)
print(library.list_books())
library.add_book("sdasda","asdads","1922",3819872310)

print(library.add_book("aa","bb","xxxx",2314525446))
library.borrow_book(2314525446,17140103)

print(library.check_book_by_isbn(97819452234511))

library.add_user("SAR","TAR",2231322223)
library.add_book("fb","gs","2024",1010101010)

library.borrow_book(78123612012,2231322223)

def solve(bo):

    find = find_empty(bo)
    if find:
        row, col = find
    else:
        return True  #Sudoku has completed

    for i in range(1,10):
        if valid(bo, (row, col), i):
            bo[row][col] = i # First , the number is filled to the empty box

            if solve(bo): # Check the new solution
                return True

            bo[row][col] = 0  # If the solution is wrong, then the number is taken again

    return False # If the all numbers between 1-9 can not provide any solution


def valid(bo, pos, num):

    # Check row
    for i in range(0, len(bo)):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    # Check Column
    for i in range(0, len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box

    box_x = pos[1]//3
    box_y = pos[0]//3 #These codes determine which subgrid we want to assign numbers to

    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x*3, box_x*3 + 3):
            if bo[i][j] == num and (i,j) != pos:
                return False

    return True


def find_empty(bo): 

    #Check the empty boxes

    for i in range(len(bo)): # O(9)
        for j in range(len(bo[0])): # O(9)
            if bo[i][j] == 0: # O(81)
                return (i, j)

    return None


board = [
    [9,0,1,0,5,3,0,0,0], # Sudoku Board
    [4,6,0,0,0,7,3,0,0],
    [0,0,0,0,1,0,0,8,0],
    [0,0,0,0,7,0,1,0,6],
    [0,0,6,0,0,4,0,0,0],
    [5,1,0,0,0,0,0,7,8],
    [2,4,5,7,3,0,9,0,1],
    [0,0,0,9,4,0,0,5,0],
    [1,0,7,6,2,0,8,4,3]
]


def print_board(bo):

    # Visualization in the form of Sudoku

    for i in range(len(bo)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - - -")
        for j in range(len(bo[0])): # UpperLoop will loop once then second loop will loop 9 times
            if j % 3 == 0:
                print(" | ",end="")

            if j == 8:
                print(bo[i][j], end="\n")
            else:
                print(str(bo[i][j]) + " ", end="")

# Kerem Åženberber Y24LBIM803
print(find_empty(board))
solve(board) # It solves one by one, so that we can not visualize to the all empty boxes
print_board(board)
print(find_empty(board))
